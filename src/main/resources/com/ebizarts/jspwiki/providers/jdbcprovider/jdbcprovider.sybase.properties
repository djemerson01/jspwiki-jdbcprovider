## 
## JDBCProvider - an RDBMS backed page- and attachment provider for
## JSPWiki.
## 
## Copyright (C) 2006-2007 The JDBCProvider development team.
## 
## The JDBCProvider developer team members are:
##   Xan Gregg
##   Soeren Berg Glasius
##   Mikkel Troest
##   Milt Taylor
## 
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU Lesser General Public License as published by
## the Free Software Foundation; either version 2.1 of the License, or
## (at your option) any later version.
## 
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU Lesser General Public License for more details.
## 
## You should have received a copy of the GNU Lesser General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##

## ---------------------------- Common database checks sql

# ping connection
# result: ignored, we just make sure there's no exception
check.connection = SELECT 1 FROM WIKI_PAGE WHERE 2=1

# any number of initialization checks
# result: ignored, we just make sure there's no exception
check.wiki_page = SELECT COUNT(*) FROM WIKI_PAGE
check.wiki_attachments = SELECT COUNT(*) FROM WIKI_ATT

## ---------------------------- Wiki page sql

# check to see if a given page exists
# input: string
# result: must be non-empty
page.exists = SELECT TOP 1  VERSION FROM WIKI_PAGE WHERE  NAME = ?

# check to see if a given page exists at a given version
# input: string, int 
# result: must be non-empty
page.versionExists = SELECT  VERSION FROM WIKI_PAGE WHERE  NAME = ? AND  VERSION = ?

# get the content content for the latest version of the given page
# input: string
# result: string(CONTENT)
page.getCurrent = SELECT  CONTENT FROM WIKI_PAGE WHERE  NAME = ?

# get the content for the given version of the given page
# input: string, int
# result: string(CONTENT)
page.getVersion = SELECT  CONTENT FROM WIKI_PAGE WHERE  NAME = ? AND  VERSION = ?

# insert a new record into the current pages table
# input: string, int, timestamp, string, string, string
page.insertPage = INSERT INTO WIKI_PAGE ( NAME,  VERSION,  CHANGE_TIME,  CHANGE_BY,  CHANGE_NOTE,  CONTENT) VALUES (?, ?, ?, ?, ?, ?)

# update a versioned page, for a continuation editt
# input: timestamp, string, string, string, string, int
page.updatePage = UPDATE WIKI_PAGE SET  CHANGE_TIME=?,  CHANGE_BY=?,  CHANGE_NOTE=?,  CONTENT=? WHERE  NAME =? AND  VERSION=?

# get info for current page
# input: string
# result: int(VERSION), timestamp(CHANGE_TIME), string(CHANGE_BY), string(CHANGE_NOTE)
page.getCurrentInfo = SELECT P1.VERSION, P1.CHANGE_TIME, P1.CHANGE_BY, P1.CHANGE_NOTE FROM WIKI_PAGE P1 WHERE P1.NAME=? AND P1.VERSION = (SELECT MAX( VERSION) FROM WIKI_PAGE P2 WHERE P2.NAME=P1.NAME)

# get info for version page
# input: string, int
# result: int(VERSION), timestamp(CHANGE_TIME), string(CHANGE_BY), string(CHANGE_NOTE)
page.getVersionInfo = SELECT  VERSION,  CHANGE_TIME,  CHANGE_BY, P1.CHANGE_NOTE FROM WIKI_PAGE WHERE  NAME = ? AND  VERSION = ?

# get latest version of every page
# result: string(NAME), int(VERSION), timestamp(CHANGE_TIME), string(CHANGE_BY), string(CHANGE_NOTE)
page.getAllPages = SELECT  P1.NAME, P1.VERSION, P1.CHANGE_TIME, P1.CHANGE_BY, P1.CHANGE_NOTE FROM WIKI_PAGE P1 WHERE P1.VERSION = (SELECT MAX( VERSION) FROM WIKI_PAGE P2 WHERE P2.NAME=P1.NAME)

# get latest version of every page CHANGE_TIME since the given date
# input: timestamp
# result: string(NAME), int(VERSION), timestamp(CHANGE_TIME), string(CHANGE_BY), string(CHANGE_NOTE)
page.getAllChangedSince = SELECT  P1.NAME, P1.VERSION, P1.CHANGE_TIME, P1.CHANGE_BY, P1.CHANGE_NOTE FROM WIKI_PAGE P1 WHERE P1.CHANGE_TIME > ? AND P1.VERSION = (SELECT MAX( VERSION) FROM WIKI_PAGE P2 WHERE P2.NAME=P1.NAME)

# get number of pages (with unique names)
# result: int(count)
page.getPageCount = SELECT COUNT(DISTINCT  NAME) from WIKI_PAGE

# get info for all versions of a given page, sorted by descending version num
# input: string
# result: int(VERSION), timestamp(CHANGE_TIME), string(CHANGE_BY), string(CHANGE_NOTE)
page.getVersions =  SELECT  VERSION,  CHANGE_TIME,  CHANGE_BY,  CHANGE_NOTE FROM WIKI_PAGE WHERE  NAME = ? ORDER BY  VERSION

# delete given version of given page
# input: string, int
page.deleteVersion = DELETE FROM WIKI_PAGE WHERE  NAME = ? AND  VERSION = ?

# delete all versions of given page
# input: string
page.delete = DELETE FROM WIKI_PAGE WHERE NAME = ?

# rename current version given page
# input: string, string
page.move = UPDATE WIKI_PAGE SET  NAME = ? WHERE  NAME = ?

## ---------------------------- Wiki attachment sql

# get number of attachment pages
# result: int(count)
attachment.getCount = SELECT COUNT(*) FROM WIKI_ATT

# insert a new attachment (possible a new version of an existing attachment
# input: string, string, int, timestamp, string, string, byte[] , int
attachment.insert = INSERT INTO WIKI_ATT ( PAGENAME,  FILENAME,  VERSION,  CHANGE_TIME,  CHANGE_BY,  CHANGE_NOTE,  DATA,  LENGTH) VALUES (?, ?, ?, ?, ?, ?, ?, ?)

# get attachment data
# input: string, string, int
# result: byte[](DATA)
attachment.getData = SELECT  DATA FROM WIKI_ATT WHERE  PAGENAME = ? AND  FILENAME = ? AND  VERSION = ?

# get list of attachments for a given page grouped by filename in descending order of version number
# input: string
# result: int(LENGTH), string(FILENAME), timestamp(CHANGE_TIME), string(CHANGE_BY), string(CHANGE_NOTE), int(VERSION)
attachment.getList = SELECT  LENGTH,  FILENAME,  CHANGE_TIME,  CHANGE_BY,  CHANGE_NOTE,  VERSION FROM WIKI_ATT WHERE  PAGENAME = ? GROUP BY  FILENAME ORDER BY  VERSION DESC

# get list of attachment changed since the given date
# input: timestamp
# result: string(PAGENAME), string(FILENAME), int(LENGTH), timestamp(CHANGE_TIME), string(CHANGE_BY), string(CHANGE_NOTE), int(VERSION)
attachment.getChanged = SELECT  PAGENAME,  FILENAME,  LENGTH,  CHANGE_TIME,  CHANGE_BY,  CHANGE_NOTE,  VERSION FROM WIKI_ATT WHERE  CHANGE_TIME > ? ORDER BY  CHANGE_TIME DESC

# get info for a given page/attachment/version
# input: string, string, int
# result: int(LENGTH), timestamp(CHANGE_TIME), string(CHANGE_BY), string(CHANGE_NOTE)
attachment.getInfo = SELECT  LENGTH,  CHANGE_TIME,  CHANGE_BY,  CHANGE_NOTE FROM WIKI_ATT WHERE  PAGENAME = ? AND  FILENAME = ? AND  VERSION = ?

# get latest version for the given page/attachment
# input: string, string
# result: int(VERSION)
attachment.getLatestVersion = SELECT max( VERSION) FROM WIKI_ATT WHERE  PAGENAME = ? AND  FILENAME = ?

# get info for each version in descending order of version number
# input: string, string
# result: int(LENGTH), timestamp(CHANGE_TIME), string(CHANGE_BY), string(CHANGE_NOTE), int(VERSION)
attachment.getVersions = SELECT  LENGTH,  CHANGE_TIME,  CHANGE_BY,  CHANGE_NOTE,  VERSION FROM WIKI_ATT WHERE  PAGENAME = ? AND  FILENAME = ? ORDER BY  VERSION DESC

# delete a given page/attachment/version
# input: string, string, int
attachment.deleteVersion = DELETE FROM WIKI_ATT WHERE  PAGENAME = ? AND  FILENAME = ? AND  VERSION = ?

# delete a given page/attachment (all versions)
# input: string, string
attachment.delete = DELETE FROM WIKI_ATT WHERE  PAGENAME = ? AND  FILENAME = ?

# move an attachment from one page to another page
# input: string, string
attachment.move = UPDATE WIKI_ATT SET  PAGENAME = ? WHERE  PAGENAME = ?
